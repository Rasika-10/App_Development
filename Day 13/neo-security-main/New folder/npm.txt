
SQL:

1

create table employees(
    employee_id int not null primary key,
    first_name varchar(25) not null,
    last_name varchar(25) not null,
    email varchar(25)not null,
    phone_number varchar(20) not null,
    hire_date date not null,
    job_id varchar(10),
    salary decimal(8,2) not null,
    commission_pct int ,
    manager_id int,
    department_id int
);

2

drop table facilities;

3

alter table members
change column zipcode pincode int;

4

INSERT into employees(EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID)
VALUES(1,'Adhi','B','adhi@gmail.com','129988','2004/04/22','100',700000.00,11,141,111);
INSERT into employees(EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID)
VALUES(2,'nikita','M','niki@gmail.com','16166','2022/04/04','200',600000.00,12,121,1221);
INSERT into employees(EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID)
VALUES(3,'monish','K','monish@gmail.com','18881','2004/08/18','300',650000.00,13,131,1331);
INSERT into employees(EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID)
VALUES(4,'aryan','M','aryan@gmail.com','19991','2022/05/13','400',200000.00,14,141,1441);

5

update facilities set name='Snooker Table-2' where name='Pool Table';

6

delete from members;

7

update facilities
set membercost=1000
where monthlymaintenance>500;

8

create table orders(
    orderNumber int not null primary key,
    orderDate date not null,
    requiredDate date not null,
    shippedDate date not null,
    status varchar(15) not null,
    comments text not null,
    customerNumber int not null,
    foreign key (customerNumber) references customers(customerNumber)
);

9

alter table employee
add constraint depIdFk
foreign key(deptId) references department(departmentId);

10

select recommendedby,count(recommendedby) as count from members
where recommendedby is not null
group by recommendedby
order by recommendedby;

11

select facid,extract(month from starttime) as month,sum(slots) as "Total Slots" 
from bookings
where starttime>='2012-07-01' and starttime <='2012-08-31'
group by facid,month
order by facid,month;

12

select Employee_id as ID,First_name as First_name,sum(Incentive_amount) as Incentive from EMPLOYEE_XYZ e
join  INCENTIVES_XYZ i
on e.Employee_id=i.id
group by i.id
order by Employee_Id;

13

select Employee_id as ID,First_name as First_name,sum(Incentive_amount) as Incentive from EMPLOYEE_XYZ e
join  INCENTIVES_XYZ i
on e.Employee_id=i.id
group by i.id
order by Employee_Id;

14

select authorName as Author_Name,sum(soldCopies) as sold_sum from authorBooks a
join soldCopies s
on a.bookName=s.bookName
group by a.authorName
order by sold_sum desc
limit 3;

15

select departmentName as Department_Name,avg(Salary) as Avg_salaries
from EMPLOYEES_ABC e
join SALARIES_ABC s
on e.employeeID=s.employeeID
group by departmentName
having Avg_salaries<7000;

16

select cust_name as Customers from CUSTOMERS 
where id not in (select customer_id from ORDERS) 
order by cust_name asc;

17

select first_name,last_name from EMPLOYEES_SUBQ where salary >
(select salary from EMPLOYEES_SUBQ WHERE employee_id=105);

18

select first_name,last_name,salary,department_id,job_id from EMPLOYEES_SUBQ
where job_id=(select job_id from EMPLOYEES_SUBQ where employee_id=110);

19

select employee_id,first_name,last_name,salary,department_id from employees e
where salary>(select avg(salary)from employees where department_id=e.department_id)
order by department_id,first_name,last_name;

20

create view newyorkstaff as
select * from salesman
where city='New York';

21

create view totalforday as
select ord_date,count(distinct customer_id)as dist_customer,round(avg(purch_amt),2) as AVG,
round(sum(purch_amt),2) as SUM from orders
group by ord_date;

22

create view gradecount as
select grade,count(customer_id) as number 
from customer
group by grade;


23

DELIMITER $$
CREATE PROCEDURE EmployeeList(
In dept_id INT,INOUT employee_list VARCHAR(2000))

BEGIN
    DECLARE v_finished INTEGER DEFAULT 0;
    DECLARE v_ename VARCHAR(100) DEFAULT "";
    
    DECLARE C1 CURSOR FOR
        SELECT EMP_NAME FROM Employees WHERE DEPARTMENT_ID=dept_id;
        
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_finished = 1;
    
    OPEN C1;
    
    get_emp: LOOP
        FETCH C1 INTO v_ename;
        IF v_finished = 1 THEN 
            LEAVE get_emp;
        END IF;
            
            SET employee_list = CONCAT(employee_list,v_ename,";");
    END LOOP get_emp;
        CLOSE C1;
END$$
DELIMITER ;

Footer:

SET @employeelist = '';
CALL EmployeeList(97, @employeelist);
SELECT @employeelist;

24

DELIMITER $$ 
CREATE PROCEDURE ProductCount(
IN in_prod_type varchar(30))
BEGIN 
DECLARE v_finished integer default 0;
DECLARE count_ int default 0; 
DECLARE pro_name varchar(100) default ''; 
declare C1 CURSOR for select product_type 
from Product
where product_type=in_prod_type;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_finished =1;
OPEN C1;
Me :LOOP
FETCH C1 into pro_name;
if v_finished= 1 then leave Me;
end if;
SET count_=count_+1;
END LOOP;
select count_ as ProductCount;
CLOSE C1;
END $$
DELIMITER ;

Footer:

CALL ProductCount('Hygiene');

25

DELIMITER $$
create trigger product_availability
after insert on products
for each row
begin
if new.availability='LOCAL' THEN
insert into products_to_stores(product_id,store_id)
values(new.product_id,1);
else
insert into products_to_stores(product_id,store_id)
values(new.product_id,1);
insert into products_to_stores(product_id,store_id)
values(new.product_id,2);
end if;
end $$
DELIMITER ;

Footer:

INSERT INTO products (product_name, cost_price, retail_price, availability) VALUES ('BLUETOOTH KEYBOARD', '17.60', '23.30','LOCAL');
INSERT INTO products (product_name, cost_price, retail_price, availability) VALUES ('DVB-T2 RECEIVE', '49.80', '53.40','ALL');
SELECT * FROM products_to_stores;

26

delimiter $$ 
create trigger product_archiver after
delete on products
for each row begin 
insert into archived_products
values(old.product_id,old.product_name,old.cost_price,old.retail_price, old.availability); 
end $$
delimiter ;

Footer:

DELETE FROM products WHERE product_id=1;
SELECT * FROM archived_products;

27

delimiter $$
 create trigger account_balance_validator before 
 update on customer_accounts
 for each row begin 
 if new.account_balance<0 
 then
 set new.account_balance=0;
 end if;
 end $$ 
 delimiter ;

Footer:

UPDATE customer_accounts
SET
account_balance = -56
WHERE cust_id = 3;

SELECT * FROM customer_accounts;

28

select count(emp_id) as AgeCount from Employee where age<35;  

29

select replace(station_code,'M','K') as station_code,name
from Train_Route
order by station_code;

30

select custid,fname,dob from customer 
order by dob,fname;

